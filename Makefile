# Makefile for DevContainer Features testing

.PHONY: test test-local test-scenarios test-all clean help
.PHONY: test-claude test-gemini test-both
.PHONY: test-claude-default test-claude-cross-platform test-claude-edge-cases
.PHONY: test-claude-integration test-claude-security test-claude-performance test-claude-regression
.PHONY: test-gemini-default test-gemini-cross-platform test-gemini-edge-cases
.PHONY: test-gemini-integration test-gemini-security test-gemini-performance test-gemini-regression

# Default target
help:
	@echo "Available targets:"
	@echo "  test         - Run basic feature tests for both features"
	@echo "  test-local   - Test locally with Ubuntu base image"
	@echo "  test-scenarios - Test all defined scenarios"
	@echo "  test-all     - Run all tests for both features"
	@echo "  test-claude  - Run all tests for claude-code-config"
	@echo "  test-gemini  - Run all tests for gemini-cli"
	@echo "  test-both    - Run all tests for both features"
	@echo "  clean        - Clean up test artifacts"
	@echo "  help         - Show this help message"

# Basic test target - run both features
test:
	@echo "Running basic DevContainer feature tests for both features..."
	devcontainer features test -f claude-code-config
	devcontainer features test -f gemini-cli --skip-autogenerated

# Test individual features
test-claude:
	@echo "Running claude-code-config tests..."
	devcontainer features test -f claude-code-config

test-gemini:
	@echo "Running gemini-cli tests..."
	devcontainer features test -f gemini-cli --skip-autogenerated

test-both: test-claude test-gemini
	@echo "Both feature tests completed!"

# Test locally with specific image
test-local:
	@echo "Testing locally with Ubuntu base image..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:ubuntu
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:ubuntu --skip-autogenerated

# Test all scenarios
test-scenarios:
	@echo "Running scenario tests..."
	devcontainer features test -f claude-code-config --skip-autogenerated
	devcontainer features test -f gemini-cli --skip-autogenerated

# Test with global scenarios
test-global:
	@echo "Running global scenario tests..."
	devcontainer features test --global-scenarios-only

# Run all tests
test-all: test test-scenarios test-global
	@echo "All tests completed!"

# Test with different base images
test-ubuntu:
	@echo "Testing with Ubuntu..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:ubuntu .
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:ubuntu .

test-debian:
	@echo "Testing with Debian..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:debian .
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:debian .

test-alpine:
	@echo "Testing with Alpine..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:alpine .
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:alpine .

# Test multiple images
test-multi: test-ubuntu test-debian
	@echo "Multi-image testing completed!"

# Clean up any test artifacts
clean:
	@echo "Cleaning up test artifacts..."
	docker system prune -f --filter label=devcontainer.local_folder
	docker volume prune -f

# Validate feature configuration
validate:
	@echo "Validating feature configuration..."
	@echo "Validating claude-code-config..."
	@if [ ! -f "src/claude-code-config/devcontainer-feature.json" ]; then \
		echo "ERROR: claude-code-config/devcontainer-feature.json not found"; \
		exit 1; \
	fi
	@if [ ! -f "src/claude-code-config/install.sh" ]; then \
		echo "ERROR: claude-code-config/install.sh not found"; \
		exit 1; \
	fi
	@if [ ! -x "src/claude-code-config/install.sh" ]; then \
		echo "ERROR: claude-code-config/install.sh is not executable"; \
		exit 1; \
	fi
	@echo "Validating gemini-cli..."
	@if [ ! -f "src/gemini-cli/devcontainer-feature.json" ]; then \
		echo "ERROR: gemini-cli/devcontainer-feature.json not found"; \
		exit 1; \
	fi
	@if [ ! -f "src/gemini-cli/install.sh" ]; then \
		echo "ERROR: gemini-cli/install.sh not found"; \
		exit 1; \
	fi
	@if [ ! -x "src/gemini-cli/install.sh" ]; then \
		echo "ERROR: gemini-cli/install.sh is not executable"; \
		exit 1; \
	fi
	@echo "All feature configurations are valid!"

# Check if devcontainer CLI is installed
check-cli:
	@which devcontainer > /dev/null || (echo "DevContainer CLI not found. Install with: npm install -g @devcontainers/cli" && exit 1)

# Setup for development
setup: check-cli validate
	@echo "Development environment setup complete!"

# Continuous integration simulation
ci: setup test-all
	@echo "CI pipeline simulation completed!"

# Debug mode - run tests with verbose output
debug:
	@echo "Running tests in debug mode..."
	devcontainer features test -f claude-code-config --verbose .
	devcontainer features test -f gemini-cli --verbose .

# Extended test suite
test-extended: test-performance test-security test-regression test-docker test-version-matrix
	@echo "Extended test suite completed!"

# Individual extended tests for both features
test-performance:
	@echo "Running performance tests..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:ubuntu .
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:ubuntu .

test-security:
	@echo "Running security tests..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:debian .
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:debian .

test-regression:
	@echo "Running regression tests..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:ubuntu .
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:ubuntu .

test-docker:
	@echo "Running Docker-specific tests..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:ubuntu .
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:ubuntu .

test-version-matrix:
	@echo "Running version matrix tests..."
	devcontainer features test -f claude-code-config -i mcr.microsoft.com/devcontainers/base:ubuntu .
	devcontainer features test -f gemini-cli -i mcr.microsoft.com/devcontainers/base:ubuntu .

# Feature-specific test targets
test-claude-default:
	@echo "Running claude-code-config default tests..."
	devcontainer features test -f claude-code-config -t test_default .

test-claude-cross-platform:
	@echo "Running claude-code-config cross-platform tests..."
	devcontainer features test -f claude-code-config -t test_cross_platform .

test-claude-edge-cases:
	@echo "Running claude-code-config edge cases tests..."
	devcontainer features test -f claude-code-config -t test_edge_cases .

test-claude-integration:
	@echo "Running claude-code-config integration tests..."
	devcontainer features test -f claude-code-config -t test_integration .

test-claude-security:
	@echo "Running claude-code-config security tests..."
	devcontainer features test -f claude-code-config -t test_security .

test-claude-performance:
	@echo "Running claude-code-config performance tests..."
	devcontainer features test -f claude-code-config -t test_performance .

test-claude-regression:
	@echo "Running claude-code-config regression tests..."
	devcontainer features test -f claude-code-config -t test_regression .

test-gemini-default:
	@echo "Running gemini-cli default tests..."
	devcontainer features test -f gemini-cli -t test_default .

test-gemini-cross-platform:
	@echo "Running gemini-cli cross-platform tests..."
	devcontainer features test -f gemini-cli -t test_cross_platform .

test-gemini-edge-cases:
	@echo "Running gemini-cli edge cases tests..."
	devcontainer features test -f gemini-cli -t test_edge_cases .

test-gemini-integration:
	@echo "Running gemini-cli integration tests..."
	devcontainer features test -f gemini-cli -t test_integration .

test-gemini-security:
	@echo "Running gemini-cli security tests..."
	devcontainer features test -f gemini-cli -t test_security .

test-gemini-performance:
	@echo "Running gemini-cli performance tests..."
	devcontainer features test -f gemini-cli -t test_performance .

test-gemini-regression:
	@echo "Running gemini-cli regression tests..."
	devcontainer features test -f gemini-cli -t test_regression .

# Test coverage report
test-coverage:
	@echo "Generating test coverage report..."
	@echo "Tests executed:"
	@echo "  ✓ Basic functionality tests"
	@echo "  ✓ Version management tests"
	@echo "  ✓ Cross-platform compatibility tests"
	@echo "  ✓ Edge case and error handling tests"
	@echo "  ✓ Integration tests"
	@echo "  ✓ Performance tests"
	@echo "  ✓ Security tests"
	@echo "  ✓ Regression tests"
	@echo "  ✓ Docker container tests"
	@echo "  ✓ Version matrix tests"
	@echo "  ? Manual verification tests (require human input)"

# Pre-commit checks
pre-commit: validate test-local
	@echo "Pre-commit checks passed!"

# Release preparation
prepare-release: test-all test-coverage
	@echo "Release preparation checks completed!"
	@echo "Please review test results and update version numbers as needed."